import { useState, useEffect } from "react";
import axios from "axios";
import "./StuffBasket_Popup.css";
import { API_URL } from "../../config";
import Swal from "sweetalert2";

const StuffBasket_Popup = ({
  basketItems = [],
  setBasketItems = () => {},
  onClose,
  onCancel,
  onSuccess,
}) => {
  const totalQty = basketItems.reduce((sum, i) => sum + i.quantity, 0);
  const totalPrice = basketItems.reduce(
    (sum, i) => sum + (i.quantity * i.price || 0),
    0
  );

  const [purpose, setPurpose] = useState("");
  const [supervisor, setSupervisor] = useState("");
  const [userFullName, setUserFullName] = useState("");
  const [department, setDepartment] = useState("");
  const [userId, setUserId] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showCancelSuccess, setShowCancelSuccess] = useState(false);

  useEffect(() => {
    const user = JSON.parse(localStorage.getItem("user"));
    if (user) {
      setUserFullName(user.full_name);
      setUserId(user.id);
    }
  }, []);

  useEffect(() => {
    if (!showCancelSuccess) return;
    const timeout = setTimeout(() => {
      Swal.fire({
        title: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        text: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
        icon: "success",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
      setShowCancelSuccess(false);
    }, 300);
    return () => clearTimeout(timeout);
  }, [showCancelSuccess]);

  const handleCancel = () => {
    Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      text: "‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      cancelButtonText: "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ",
    }).then((result) => {
      if (result.isConfirmed) {
        onClose();
        onCancel();
        
        setShowCancelSuccess(true);
      }
    });
  };

  const handleQuantityChange = (id, newQuantity) => {
    const qty = Number(newQuantity);
    const updated = basketItems.map((item) =>
      item.id === id ? { ...item, quantity: isNaN(qty) ? 0 : qty } : item
    );
    setBasketItems(updated);
  };

  const handleRemoveItem = (id) => {
    const updated = basketItems.filter((item) => item.id !== id);
    setBasketItems(updated);
  };

  const handleConfirm = async () => {
    if (isSubmitting) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    if (basketItems.length === 0) {
      Swal.fire({
        icon: "warning",
        title: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô",
      });
      return;
    }

    if (basketItems.some((item) => item.quantity === 0)) {
      Swal.fire({
        icon: "warning",
        title: "‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å",
      });
      return;
    }

    if (!purpose.trim() || !supervisor.trim()) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
      });
      return;
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    setIsSubmitting(true);

    const payload = {
      created_by: userId,
      reason: purpose,
      total_amount: parseFloat(totalPrice.toFixed(2)),
      Admin_status: "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      User_status: "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á",
      supervisor_name: supervisor,
      items: basketItems.map((item) => ({
        material_id: item.id,
        quantity: item.quantity,
        total_price: parseFloat((item.quantity * item.price).toFixed(2)),
      })),
    };

    try {
      const res = await axios.post(
        `${API_URL}/stuff_materials/add_stuff_materials.php`,
        payload
      );
      if (res.data.status === "success") {
        onSuccess?.();
        setBasketItems([]);
        onClose();
        setTimeout(() => {
          Swal.fire({
            title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            text: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏´‡∏±‡∏™: ${res.data.running_code})`,
            icon: "success",
            confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          });
        }, 200);
      } else {
        Swal.fire({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          text: res.data.message,
          icon: "error",
          confirmButtonText: "‡∏õ‡∏¥‡∏î",
        });
      }
    } catch (error) {
      console.error("API error:", error);
      Swal.fire({
        title: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ",
        icon: "error",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    } finally {
      setIsSubmitting(false);
    }
  };


  
  return (
    <div className="stuff-basket-popup-overlay">
      <div className="stuff-basket-popup">
        <div className="stuff-basket-popup-header">
          <span className="stuff-basket-popup-title">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
          <button className="stuff-basket-popup-close" onClick={onClose}>
            √ó
          </button>
        </div>

        <div className="stuff-basket-popup-body">
          <div className="stuff-basket-popup-info-grid">
            <div>
              <label>‡∏ä‡∏∑‡πà‡∏≠</label>
              <input type="text" value={userFullName} readOnly />
            </div>
            {/* <div>
              <label>‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î</label>
              <input
                type="text"
                value={department}
                onChange={(e) => setDepartment(e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î"
              />
            </div> */}
            <div>
              <label>‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</label>
              <input
                type="text"
                value={`${basketItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`}
                readOnly
              />
            </div>
            <div>
              <label>‡∏Ñ‡∏•‡∏±‡∏á</label>
              <input type="text" value="‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á" readOnly />
            </div>
            <div>
              <label>‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô/‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</label>
              <input
                type="text"
                value={purpose}
                onChange={(e) => setPurpose(e.target.value)}
                placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
              />
            </div>
            <div>
              <label>‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô</label>
              <input
                type="text"
                value={supervisor}
                onChange={(e) => setSupervisor(e.target.value)}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô"
              />
            </div>
          </div>

          <div className="stuff-basket-popup-table-section">
            <h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏</h3>
            <div className="stuff-basket-popup-table-scroll">
              <table className="stuff-basket-popup-material-table">
                <thead>
                  <tr>
                    <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                    <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö</th>
                    <th>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤</th>
                  </tr>
                </thead>
                <tbody>
                  {basketItems.map((item, index) => (
                    <tr key={item.id}>
                      <td>{index + 1}</td>
                      <td>{item.name}</td>
                      <td>
                        <div className="stuff-basket-qty-wrapper">
                          <input
                            type="number"
                            min="0"
                            value={item.quantity}
                            onChange={(e) =>
                              handleQuantityChange(item.id, e.target.value)
                            }
                            className="stuff-basket-qty-input"
                          />
                          <span>{item.unit}</span>
                        </div>
                      </td>
                      <td style={{ paddingRight: "12px" }}>
                        <div
                          style={{
                            display: "flex",
                            justifyContent: "flex-end",
                            alignItems: "center",
                            gap: "12px",
                          }}
                        >
                          <span className="value">
                            {(item.quantity * item.price).toFixed(2)} ‡∏ö‡∏≤‡∏ó
                          </span>
                          <button
                            className="stuff-basket-delete-btn"
                            onClick={() => handleRemoveItem(item.id)}
                            title="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                          >
                            üóë
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                  <tr className="stuff-basket-total-row">
                    <td colSpan="2">
                      <strong>‡∏£‡∏ß‡∏°</strong>
                    </td>
                    <td>
                      <strong>{totalQty} ‡∏´‡∏ô‡πà‡∏ß‡∏¢</strong>
                    </td>
                    <td>
                      <strong>{totalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó</strong>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div className="stuff-basket-popup-footer">
          <button
            className="stuff-basket-popup-cancel-btn"
            onClick={handleCancel}
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </button>
          <button
            className="stuff-basket-popup-confirm-btn"
            onClick={handleConfirm}
          >
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </button>
        </div>
      </div>
    </div>
  );
};

export default StuffBasket_Popup;
